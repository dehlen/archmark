// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: queries.sql

package dbx

import (
	"context"
)

const countBookmarksList = `-- name: CountBookmarksList :one
SELECT COUNT(*)
  FROM bookmarks b
  WHERE b.user_id = $1::bigint
`

func (q *Queries) CountBookmarksList(ctx context.Context, userID int64) (int64, error) {
	row := q.db.QueryRow(ctx, countBookmarksList, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createBookmark = `-- name: CreateBookmark :one
INSERT INTO bookmarks (
  user_id, url
) VALUES (
  $1::bigint, $2::text
) RETURNING id, user_id, url, title, html, file_path, status, created_at, updated_at
`

type CreateBookmarkParams struct {
	UserID int64
	Url    string
}

func (q *Queries) CreateBookmark(ctx context.Context, arg CreateBookmarkParams) (Bookmark, error) {
	row := q.db.QueryRow(ctx, createBookmark, arg.UserID, arg.Url)
	var i Bookmark
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Url,
		&i.Title,
		&i.Html,
		&i.FilePath,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  name, username, encrypted_password
) VALUES (
  $1::text, $2::text, $3::text
) RETURNING id, username, name, encrypted_password, created_at, updated_at
`

type CreateUserParams struct {
	Name              string
	Username          string
	EncryptedPassword string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Name, arg.Username, arg.EncryptedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Name,
		&i.EncryptedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const fetchBookmarkByID = `-- name: FetchBookmarkByID :one
SELECT b.id, b.user_id, b.url, b.title, b.html, b.file_path, b.status, b.created_at, b.updated_at
  FROM bookmarks b
  WHERE b.id = $1::bigint
  LIMIT 1
`

func (q *Queries) FetchBookmarkByID(ctx context.Context, id int64) (Bookmark, error) {
	row := q.db.QueryRow(ctx, fetchBookmarkByID, id)
	var i Bookmark
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Url,
		&i.Title,
		&i.Html,
		&i.FilePath,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const fetchBookmarksList = `-- name: FetchBookmarksList :many
SELECT b.id, b.user_id, b.url, b.title, b.html, b.file_path, b.status, b.created_at, b.updated_at
  FROM bookmarks b
  WHERE b.user_id = $1::bigint
  ORDER BY b.created_at DESC
  LIMIT $3::int
  OFFSET $2::int
`

type FetchBookmarksListParams struct {
	UserID     int64
	PageOffset int32
	PageLimit  int32
}

func (q *Queries) FetchBookmarksList(ctx context.Context, arg FetchBookmarksListParams) ([]Bookmark, error) {
	rows, err := q.db.Query(ctx, fetchBookmarksList, arg.UserID, arg.PageOffset, arg.PageLimit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Bookmark
	for rows.Next() {
		var i Bookmark
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Url,
			&i.Title,
			&i.Html,
			&i.FilePath,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const fetchUserByUsername = `-- name: FetchUserByUsername :one
SELECT u.id, u.username, u.name, u.encrypted_password, u.created_at, u.updated_at
  FROM users u
  WHERE u.username = $1::text LIMIT 1
`

func (q *Queries) FetchUserByUsername(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, fetchUserByUsername, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Name,
		&i.EncryptedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const markBookmarkFetched = `-- name: MarkBookmarkFetched :exec
UPDATE bookmarks
  SET status = 'fetched', file_path = $1::text
  WHERE id = $2::bigint
`

type MarkBookmarkFetchedParams struct {
	FilePath string
	ID       int64
}

func (q *Queries) MarkBookmarkFetched(ctx context.Context, arg MarkBookmarkFetchedParams) error {
	_, err := q.db.Exec(ctx, markBookmarkFetched, arg.FilePath, arg.ID)
	return err
}

const updateBookmarkDetails = `-- name: UpdateBookmarkDetails :exec
UPDATE bookmarks
  SET title = $1::text, html = $2::text
  WHERE id = $3::bigint
`

type UpdateBookmarkDetailsParams struct {
	Title string
	Html  string
	ID    int64
}

func (q *Queries) UpdateBookmarkDetails(ctx context.Context, arg UpdateBookmarkDetailsParams) error {
	_, err := q.db.Exec(ctx, updateBookmarkDetails, arg.Title, arg.Html, arg.ID)
	return err
}
